<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02-21~02-25一周问题总结</title>
    <url>/2022/02/23/02-21~02-25%E4%B8%80%E5%91%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h5 id="隐藏浏览器滚动条"><a href="#隐藏浏览器滚动条" class="headerlink" title="隐藏浏览器滚动条"></a>隐藏浏览器滚动条</h5><p>​    最近在弄问卷系统项目的需求，需求要我实现一个添加列名以及给予相对应的计算公式，并可添加多个列名，那么在页面上，多个文本框就会自动出现滚动条，有时候不对滚动条做样式优化的话，就会显得比较不美观，那么选择隐藏滚动条，一来避免美观的麻烦，二来避免了因为浏览器的不一样导致滚动条不一样，所以添加样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//html</span><br><span class="line">&lt;el-form :model=&quot;dynamicValidateForm&quot; ref=&quot;dynamicValidateForm&quot; class=&quot;groupItems&quot;&gt;&lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">//css</span><br><span class="line">.groupItems&#123;</span><br><span class="line">	-webkit-overflow-scrolling: touch; // 提升滚动流畅度</span><br><span class="line">    -ms-overflow-style: none;</span><br><span class="line">    overflow: -moz-scrollbars-none;</span><br><span class="line">&#125;</span><br><span class="line">.groupItems::-webkit-scrollbar&#123;</span><br><span class="line">	width: 0 !important;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="API文档测试接口"><a href="#API文档测试接口" class="headerlink" title="API文档测试接口"></a>API文档测试接口</h5><p>​    拿到API文档后，可以测试接口是否能获取到数据，首先要在页面中拿到token，token一般在控制台的Network，如果网页原本就有请求，点击请求，在其Headers里找到token，最后到API文档的Authorize设置请求头部，之后就可以测试接口</p>
<h5 id="线上数据库数据"><a href="#线上数据库数据" class="headerlink" title="线上数据库数据"></a>线上数据库数据</h5><p>​    在application-dev的数据库url连接的是线上的数据库，所以如果要同步数据需要将数据同步到线上,记得修改成自己的本地数据库</p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220225162834894.png" alt="image-20220225162834894"></p>
<h5 id="elementUI、ant-Design框架中分页组件的使用"><a href="#elementUI、ant-Design框架中分页组件的使用" class="headerlink" title="elementUI、ant Design框架中分页组件的使用"></a>elementUI、ant Design框架中分页组件的使用</h5><p>​    一般页面需要展示一些多条数据的时候，后端往往会做分页接口，此时前端需要设置分页组件的属性以及点击改变页数时显示相对应的数据。</p>
<ol>
<li><p>设置分页相关的data属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">queryParams</span>:&#123;</span><br><span class="line">        <span class="attr">roomNo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>onclick功能将对应的页数赋值给data属性，然后做分页查询</p>
</li>
</ol>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">pageChange</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">current</span> = value</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">queryRoomList</span>()</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在分页查询方法中声明params对象(一般常用params)，值为pageNo、pageSize，页数和每页展示的数据量，然后在分页查询方法传入params，再将返回的result中的相关属性重新赋值给data属性中的queryParams</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">queryRoomList</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">pageNo</span>: <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">current</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">pageSize</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getAction</span>(<span class="string">&quot;room-management/page&quot;</span>, params )</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">success</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="keyword">const</span> &#123; records, size, total, current &#125; = res.<span class="property">result</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">roomList</span> = records</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">current</span> = current</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">pageSize</span> = size,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">total</span> = total</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
  </entry>
  <entry>
    <title>02-28~03-05一周问题总结</title>
    <url>/2022/02/28/02-28~03-05%E4%B8%80%E5%91%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h5 id><a href="#" class="headerlink" title></a></h5><h5 id="前端框架动态表单FormModel组件属性resetFields"><a href="#前端框架动态表单FormModel组件属性resetFields" class="headerlink" title="前端框架动态表单FormModel组件属性resetFields"></a>前端框架动态表单FormModel组件属性resetFields</h5><p>​    在项目中遇到一些搜索框，在按重置或者取消搜索的时候，需要做到清空输入的痕迹，简单粗暴的方法就是每次点击重置按钮使input框关联的值为空，但是更安全的方法就是使用FormModel属性自带的resetFields方法，但是使用该方法前，需要在父标签设置ref绑定表单属性，并且将每个item设置prop属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a-form-model :model=<span class="string">&quot;form&quot;</span> labelAlign=<span class="string">&quot;right&quot;</span> :labelCol=<span class="string">&quot;&#123; span: 7 &#125;&quot;</span> :wrapperCol=<span class="string">&quot;&#123; span: 16 &#125;&quot;</span>&gt;</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">a-row</span> <span class="attr">class</span>=<span class="string">&quot;top-desc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a-form-model-item</span> <span class="attr">label</span>=<span class="string">&quot;房间名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;position&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.roomName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a-form-model-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">a-row</span>&gt;</span></span></span><br><span class="line">&lt;/a-form-model&gt;</span><br></pre></td></tr></table></figure>



<h5 id="在computed对某一属性使用split方法报错"><a href="#在computed对某一属性使用split方法报错" class="headerlink" title="在computed对某一属性使用split方法报错"></a>在computed对某一属性使用split方法报错</h5><p>​    还是有关vue的生命周期，Error in render也就是在渲染DOM的时候，对未定义的属性是无法读取的，也就是加载数据的这个过程是异步的，即先显示初始数据，再显示带数据的数据，那么this.form起初没有lastEntryTime这个属性，当DOM渲染完成后再开始执行异步获取数据，因此此时对数据中的数据进行修改就会报错</p>
<p>​    两个解决方案：</p>
<ol>
<li>在data属性中先定义数据</li>
<li>在computed属性中设置属性为空的状态</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data</span></span><br><span class="line"><span class="attr">form</span>: &#123;</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">roomId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">lastEntryTime</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">//方法一</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// computed</span></span><br><span class="line"> <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">splitTime</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> time = (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">lastEntryTime</span> || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>] <span class="comment">//方法二</span></span><br><span class="line">      <span class="keyword">return</span> time</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">// methods  </span></span><br><span class="line"> <span class="title function_">getDetail</span>(<span class="params">id</span>)&#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">const</span> roomDetailResult = <span class="keyword">await</span> <span class="title function_">getAction</span>(<span class="string">&#x27;room-management/queryById&#x27;</span>,&#123; id &#125;)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">form</span> = &#123;</span><br><span class="line">          <span class="attr">position</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">userName</span>: userResult.<span class="property">result</span>.<span class="property">username</span>,</span><br><span class="line">          ...roomDetailResult.<span class="property">result</span></span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实战</category>
      </categories>
  </entry>
  <entry>
    <title>工作中遇到的问题</title>
    <url>/2019/04/14/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h3 id="外网连接"><a href="#外网连接" class="headerlink" title="外网连接"></a>外网连接</h3><p>​    如果项目有外网地址，在前端文件vue.config.js里面的target修改代理即可</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="页面渲染时数据能获取但报错"><a href="#页面渲染时数据能获取但报错" class="headerlink" title="页面渲染时数据能获取但报错"></a><strong>页面渲染时数据能获取但报错</strong></h4><p>​    报错原因：property（属性）找不到</p>
<pre><code>  与生命周期钩子函数相关，将初始化数据放在created里，会保证vue实例在渲染成真实dom元素之前获取到数据。
</code></pre>
<p>​        vue的生命周期函数包括：beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed。</p>
<p>​        分析一下整个vue的生命周期过程：</p>
<ol>
<li><p>new实例化一个vue实例，然后init初始化event和lifecycle，这个过程中分别调用了3个初始化函数（initLifecycle(), initEvents(), initRender()），分别初始化了生命周期，事件以及定义createElement函数，初始化生命周期时，定义了一些属性，比如表示当前状态生命周期状态得_isMounted ，_isDestroyed ，_isBeingDestroyed，表示keep-alive中组件状态的_inactive，而初始化event时，实际上就是定义了$once、$off、$emit、$on几个函数。而createElement函数是在初始化render时定义的（调用了initRender函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">我们尝试每个过程打印这两个数据</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行beforeCreate生命周期函数，此时我们拿不到data数据和$el<img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220126141416653.png" alt="image-20220126141416653"></p>
</li>
<li><p>执行created生命周期函数，此时这个过程会定义data数据、方法以及事件，完成数据劫持observe以及组件实例化，可以看到此时已经可以访问到data数据，但是$el仍然拿不到。<strong>一般在这里做初始数据的获取</strong></p>
<p>执行完created生命周期函数后会有一个对于$el的判断，判断是否有template参数，也就是写在vue实例里面的template，如果有该参数，会将该参数转换成render函数，如果没有，我们就会直接获取到el(也就是常用的[[app]]等)，判断优先级：render函数选项 &gt; template选项 &gt; outer HTML</p>
<p>如果要在created阶段中进行dom操作，就要将操作都放在 Vue.nextTick() 的回调函数中，<strong>因为created() 钩子函数执行的时候 DOM 其实并未进行任何渲染</strong>，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick() 的回调函数中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//render函数</span></span><br><span class="line"><span class="attr">render</span>: <span class="keyword">function</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;this is createElement&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220126150205849.png" alt="image-20220126150205849"></p>
<ol start="4">
<li>然后执行beforeMount生命周期函数，该过程主要工作就是将template模板或者$el转换成render函数，无论我们用vue文件(组件)、template模板还是$el都是会被转换成render函数的。beforeMount调用后要开始渲染render函数，首先会生成一个虚拟DOM(用于后面数据发生变化时，新老虚拟DOM进行对比，然后实现更新)，然后再将render函数渲染为真实的DOM，渲染出来的真实DOM会替换掉原来的$el。<img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220126150931861.png" alt="image-20220126150931861"></li>
<li>执行完mounted函数，并将标识生命周期的一个属性_isMounted 置为true。所以mounted函数内，我们是可以操作dom的，因为这个时候dom已经渲染完成了。</li>
<li>当数据发生变化时，就会执行beforeUpdate生命周期函数，需要注意的是，内部有一个判断，会去判断当前的_isMounted是不是为true _isDestroyed是不是为false，如果满足这两个条件，也就是当前组件未被销毁，才可以执行updated流程。走updated流程前，会生成一个虚拟DOM，和原来的DOM进行对比，然后将新生成的虚拟DOM，然后将render函数渲染成真实的DOM元素。</li>
<li>然后再执行updated，所以updated里面也可以操作dom，并拿到最新更新后的dom。不过这里我要插一句话了，mouted和updated的执行，并<strong>不会等待所有子组件都被挂载完成后再执行</strong>，所以如果你希望所有视图都更新完毕后再做些什么事情，那么你最好在mouted或者updated中加一个**$nextTick（）**</li>
<li>beforeDestroy函数，实例销毁前，也就是说在这个函数内，还是可以操作实例的，之后会做一系列的销毁动作，解除各种数据引用，移除事件监听，删除组件_watcher，删除子实例，删除自身self等。同时将实例属性_isDestroyed置为true</li>
<li>销毁完成后，再执行destroyed</li>
</ol>
<h4 id="v-for动态的input框添加rule验证规则"><a href="#v-for动态的input框添加rule验证规则" class="headerlink" title="v-for动态的input框添加rule验证规则"></a><strong>v-for动态的input框添加rule验证规则</strong></h4><p>​    普通的input可以直接在根元素上加rules和prop指向规则，但是动态v-for循环出input框直接添加rules和prop会导致所有input框都添加上验证规则，但是当验证通过后，还是会提示验证错误的信息。</p>
<p>解决方法：利用input框的下标index,留意prop和rules都是动态声明，验证规则也是要回调callback</p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220121092541800.png" alt="image-20220121092541800"></p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220210090645509.png" alt="image-20220210090645509"></p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220210090653602.png" alt="image-20220210090653602"></p>
<h4 id="vue请求数据"><a href="#vue请求数据" class="headerlink" title="vue请求数据"></a>vue请求数据</h4><p>vue请求数据放在created好还是mounted里好？</p>
<p>建议放在created里<br>created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。<br>mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</p>
<p>如果在mounted钩子函数中请求数据可能导致页面闪屏问题<br>其实就是加载时机问题，放在created里会比mounted触发早一点，如果在页面挂载完之前请求完成的话就不会看到闪屏了</p>
<h4 id="请你说说vue中-nextTick用法及原理"><a href="#请你说说vue中-nextTick用法及原理" class="headerlink" title="请你说说vue中$nextTick用法及原理"></a>请你说说vue中$nextTick用法及原理</h4><p><strong>定义</strong></p>
<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>
<p>官方理解：Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM</p>
<p>个人理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，即数据更新了，在dom渲染完成后调用该函数</p>
<p>应用场景：在视图更新后，基于新的视图进行操作（在created和mounted阶段需要操作新的视图，也要使用$nextTick），注意，如果想在对话框打开时使用$nextTick要确保dialog对话框:open&#x3D;’true’后再使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;example&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;未更新&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">updateMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;未更新&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;已更新&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a>组件缓存</h4><p>组件缓存需要用到keep-alive和activated连用。</p>
<p>应用场景：遇到需要频繁访问的业务或者执行频率比较高的页面就需要用到keep-alive来实现组件保持当前状态从而避免重新渲染。</p>
<p>当使用keep-alive包裹组件之后，就会多出两个周期函数activated和deactivated</p>
<p>activated： 在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用。钩子触发的顺序是created-&gt;mounted-&gt;activated，所以一般需要频繁访问的业务或者执行频率比较高的页面请求放在activated函数里</p>
<hr>
<h4 id="关于methods方法中获取数据后，在作用域外访问不到data属性"><a href="#关于methods方法中获取数据后，在作用域外访问不到data属性" class="headerlink" title="关于methods方法中获取数据后，在作用域外访问不到data属性"></a>关于methods方法中获取数据后，在作用域外访问不到data属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">queryProjectList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 查询项目</span></span><br><span class="line"> 	<span class="title function_">getAction</span>(<span class="string">&#x27;web/projectTask/taskListByProject&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">success</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">noteList</span> = res.<span class="property">result</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">project</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(project.<span class="property">kind</span> === <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> project</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">noteList</span>) <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<p>在普通通过接口获取数据，并且将数据赋值给this.noteList后，在then作用域外访问this.noteList是初始化数据，并未得到赋值后的数据</p>
<p>改为async await方法可以解决这个问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">queryProjectList</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 查询项目</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getAction</span>(<span class="string">&#x27;web/projectTask/taskListByProject&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">success</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">noteList</span> = res.<span class="property">result</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">project</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(project.<span class="property">kind</span> === <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> project</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">noteList</span>)    <span class="comment">//[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span></span><br></pre></td></tr></table></figure>

<h5 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h5><p>​    async表示函数里有异步操作，await表示后面的表达式需要等待结果返回</p>
<p>​    <strong>async函数基本用法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">timeout</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虽然在后面，但是我先执行&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>​    打开控制台，发现输出的是log语句，将timeout函数输出</p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220211153554720.png" alt="image-20220211153554720"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timeout</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虽然在后面，但是我先执行&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>​    打开控制台，发现timeout函数返回的是一个promise函数，如果要将结果输出，正常的操作是promise函数后面用then方法</p>
<p><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220211153757171.png" alt="image-20220211153757171"></p>
<p>​    考虑一下await关键字，await就是等待返回结果，一般后面跟需要执行的表达式，并且await是放在async函数里面的，修改上面函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">	let res = await fun()</span><br><span class="line">&#125;</span><br><span class="line">function fun()&#123;</span><br><span class="line">	console.log(&#x27;a&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;虽然在后面，但是我先执行&#x27;);</span><br></pre></td></tr></table></figure>

<p>​    <strong>注意事项</strong></p>
<ol>
<li><p>直接返回promise值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> asyncResult = <span class="keyword">await</span> awaitPromise；</span><br><span class="line">asyncResult不用then方法就可以获取resolve的值</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有当async有return的时候，才会返回promise对象，then方法才有效</p>
</li>
<li><p>await命令后面可以是一个promise对象，也可以是原始类型值</p>
</li>
<li><p>当存在多个await的时候，有一个await后面返回的是reject，那么剩余的await将不再执行</p>
</li>
</ol>
<hr>
<h4 id="element-table组件"><a href="#element-table组件" class="headerlink" title="element-table组件"></a>element-table组件</h4><p>​    遇到一个遍历map数据结构的问题，需要将map结构用el-table的形式遍历，起初我的思路是将map数据改成数组的形式遍历，但是因为不太熟悉el-table-column标签，导致双重遍历太过复杂且遍历失败。</p>
<p>​    解决方法：</p>
<ol>
<li>先将后端传来的dataMap转换成JSON数组，因为el-table中的data属性是需要以数组的形式读取的</li>
<li>其次需求中，表格内容中城市和选项的选中的总选次数是同级的，所以需要将map数据改为新的同级数据</li>
<li>然后到el-table-column遍历数据，因为数据结构的问题，所以我们拿到的是每一个dataMap，但是dataMap里面不止一个地市数据，并且表头是问卷的题目，所以如果从每个地市数据中再去遍历其选项(键)，就会很复杂，刚好接口数据中还有一个属性是fieldName，其值就是每个题目的选项，并且他的值在dataMap的每个地市数据的属性名(键)中能找到</li>
<li>于是el-table-column遍历fieldName属性，拿到值(选项)做为表头，然后利用动态绑定prop，prop的作用是对应列内容的字段名，也可以使用 property 属性，prop的取值是option，<strong>注意</strong>这个option不是fieldName的值吗，怎么又可以作为字段名，这里就要留意，此时prop的值option并不是代表取fieldName值，而是刚好fieldName的值，可以在每个地市数据下面的属性名(键)找到，于是就取option作为prop的值，然后就可以拿到每个地市数据下的值(city除外，因为option没有city这个值)，于是el-table就拿到了每个选项和每个选项下面选中的总次数，地市则用scope插槽实现</li>
</ol>
<p>​                    <img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220217102551931.png" alt="image-20220217102551931"><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220217102635781.png" alt="image-20220217102635781"><img src="/.com//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220217104603715.png" alt="image-20220217104603715"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = <span class="title class_">Object</span>.<span class="title function_">entries</span>(item.<span class="property">dataMap</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">[key,value]</span>) =&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                 <span class="attr">city</span>: key,</span><br><span class="line">                ...value</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">            item.<span class="property">dataMap</span> = temp</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">&quot;item.dataMap&quot;</span> border style=<span class="string">&quot;width:100%&quot;</span>  &gt;</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;地市&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;&#123; scope.row.city &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">:label</span>=<span class="string">&quot;option&quot;</span> <span class="attr">:resizable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;option in item.fieldName&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;option&quot;</span> <span class="attr">:prop</span>=<span class="string">&quot;option&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/el-table&gt;&lt;el-table-column :label=&quot;option&quot; :resizable=&quot;false&quot; v-for=&quot;option in item.fieldName&quot; :key=&quot;option&quot; :prop=&quot;option&quot;&gt;&lt;/</span>el-table-column&gt;</span><br></pre></td></tr></table></figure>



<h3 id="web性能优化"><a href="#web性能优化" class="headerlink" title="web性能优化"></a>web性能优化</h3><ol>
<li><p>网页内容</p>
<ol>
<li><p>减少http请求次数</p>
<p>http请求是有成本损耗的，一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。</p>
<p>有效的减少请求途径：</p>
<ol>
<li><p>设计层面实现页面简化</p>
</li>
<li><p>合理设置http缓存，能缓存越多越好，越久越好</p>
<p>2.1 在页面头部meta设置expires或者cache-control，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Cache-Control&quot;</span> content=<span class="string">&quot;max-age=7200&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Mon, 20 Jul 2013 23:00:00 GMT&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​    cache-control的值可设为：no-cache&#x2F;&#x2F;no-store&#x2F;&#x2F;max-age</p>
<p>​    (1) no-cache:表面意为“数据内容不被缓存”，而实际数据是被缓存到本地的，只是每次请求时候直接绕过缓存这一环节直接向服务器请求最新资源，由于浏览器解释不一样，例如ie中我们设置了no-cache之后，请求虽然不会直接使用缓存，但是还会用缓存数据与服务器数据进行一致性检测(也就是说还是有几率会用到缓存的),firefox中则完全无视no-cache存在，常用no-store</p>
<p>​    (2) no-store:指示缓存不存储此次请求的响应部分。与no-cache比较来说，一个是不用缓存，一个是不存储缓存;按理来说这个设置更加粗暴直接禁用缓存，但是具体实现起来浏览器之间差异却特别大，一般不会直接用该字段进行设置，不过no-store是为了防止缓存被恶意修改存储路径导致信息被泄露而设置的，毕竟有它的用处，在firefox浏览器中设置no-store可起到和no-cache一样的效果</p>
<p>​    (3) max-age:值是请求成功后的秒数，例如Cache-control: max-age&#x3D;3；表示此次请求成功后3秒之内发送同样请求不会去服务器重新请求，而是使用本地缓存；同样我们如果设置max-age&#x3D;0表示立即抛弃缓存直接发送请求到服务器</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="echarts常用属性"><a href="#echarts常用属性" class="headerlink" title="echarts常用属性"></a>echarts常用属性</h3><h5 id="legend-图例组件"><a href="#legend-图例组件" class="headerlink" title="legend(图例组件)"></a><strong>legend(图例组件)</strong></h5><ul>
<li><p>show：控制图例组件的显示</p>
</li>
<li><p>top、left、bottom、right：设置百分比或者绝对值可控制其位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">legend</span>:&#123;</span><br><span class="line">    <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">	<span class="attr">top</span>: <span class="string">&quot;4%&quot;</span>  <span class="comment">// top: 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>orient：通过设置horizontal、vertical控制水平还是垂直方向显示</p>
</li>
</ul>
<h5 id="grid"><a href="#grid" class="headerlink" title="grid"></a><strong>grid</strong></h5><ul>
<li><p>top、left、bottom、right：设置百分比或者绝对值控制容器的位置</p>
</li>
<li><p>width、height：设置百分比或者绝对值控制容器的宽高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">grid</span>:&#123;</span><br><span class="line">	<span class="attr">left</span>: <span class="number">60</span>,  <span class="comment">//左留白</span></span><br><span class="line">	<span class="attr">top</span>: <span class="number">50</span>,   <span class="comment">//上留白</span></span><br><span class="line">	<span class="attr">right</span>: <span class="number">50</span>,  <span class="comment">//右留白</span></span><br><span class="line">	<span class="attr">bottom</span>: <span class="number">50</span>,  <span class="comment">//下留白</span></span><br><span class="line">	<span class="attr">width</span>:<span class="string">&quot;70%&quot;</span>,</span><br><span class="line">	<span class="attr">height</span>:<span class="string">&quot;70%&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="xAxis、yAxis"><a href="#xAxis、yAxis" class="headerlink" title="xAxis、yAxis"></a><strong>xAxis、yAxis</strong></h5><p>​    常用数组对象的形式</p>
<ul>
<li><p>type：可设置value(数值轴)、category(类目轴)、time(时间轴)、log(对数轴)，当type的值是category的时候，可以通过series.data或dataset.source中获取，也可以通过xAxis设置data</p>
</li>
<li><p>boundaryGap：坐标轴两旁留白策略，默认为true，此时刻度线作为分割线，标签和数据点会在两个刻度之间</p>
</li>
<li><p>min、max：设置刻度最小值、最大值</p>
</li>
<li><p>splitNumber：坐标轴分割段数，可以通过max &#x3D; splitNumber * interval计算</p>
</li>
<li><p>axisLine：坐标轴相关设置</p>
<ol>
<li>show：设置坐标轴轴线的显示与否</li>
<li>lineStyle：设置坐标轴轴线的样式</li>
</ol>
</li>
<li><p>axisTick：坐标轴刻度相关设置</p>
<ol>
<li>length：设置刻度线长度</li>
</ol>
</li>
<li><p>splitLine：坐标轴在grid区域中的分割线，可添加lineStyle属性对其修改样式</p>
</li>
<li><p>splitArea：坐标轴在grid区域中的分割区域，默认不显示</p>
</li>
<li><p>axisLabel：坐标轴标签相关设置</p>
<ol>
<li><p>show：设置是否显示刻度标签</p>
</li>
<li><p>formatter：刻度标签的内容格式器，支持字符串模板和回调函数两种形式。</p>
<ul>
<li>formatter: ‘{value}kg’</li>
<li>formatter: function(value,index){ return value + ‘kg’ }，默认第一个参数是值，第二个参数是下标</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">xAxis</span>: [</span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">                <span class="attr">axisTick</span>: &#123;</span><br><span class="line">                  <span class="attr">length</span>:<span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">axisLine</span>:&#123;</span><br><span class="line">                  <span class="attr">show</span>:<span class="literal">false</span>,</span><br><span class="line">                  <span class="attr">lineStyle</span>:&#123;</span><br><span class="line">                    <span class="attr">color</span>:<span class="string">&quot;rgba(12, 12, 13, 1)&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">position</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="string">&#x27;广东&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="string">&#x27;东莞&#x27;</span>,<span class="string">&#x27;佛山&#x27;</span>,<span class="string">&#x27;汕头&#x27;</span>,<span class="string">&#x27;惠州&#x27;</span>,<span class="string">&#x27;珠海&#x27;</span>,<span class="string">&#x27;江门&#x27;</span>,],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line"><span class="attr">yAxis</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">                <span class="attr">position</span>:<span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">                <span class="attr">axisLine</span>:&#123;</span><br><span class="line">                  <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">                  <span class="attr">lineStyle</span>:&#123;</span><br><span class="line">                    <span class="attr">color</span>:<span class="string">&quot;rgba(12, 12, 13, 1)&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">axisTick</span>:&#123;</span><br><span class="line">                  <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">                    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">fontSize</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">formatter</span>:<span class="keyword">function</span>(<span class="params">value,index</span>)&#123;</span><br><span class="line">                      <span class="keyword">return</span> value</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">splitArea</span>: &#123;</span><br><span class="line">                  <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">splitLine</span>:&#123;</span><br><span class="line">                  <span class="attr">lineStyle</span>:&#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&quot;rgba(221, 207, 207, 0.7)&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">max</span>: <span class="number">450000</span>, <span class="comment">//最大刻度</span></span><br><span class="line">                <span class="attr">splitNumber</span>: <span class="number">10</span>, <span class="comment">// 分割线数量</span></span><br><span class="line">                <span class="attr">interval</span>: <span class="number">50000</span> <span class="comment">//刻度间隔   max = splitNumber * interval</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>前端接口限流操作，使用场景：一个用户执行恶意请求</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2022/02/22/Vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Vue</p>
<h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>​        双向绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&#x27;inputV&#x27;</span>&gt;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&#x27;inputV&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;inputV = $event.target.value&#x27;</span></span></span></span><br></pre></td></tr></table></figure>

<p>​    实际上，v-model语法糖做了两件事：</p>
<ol>
<li>input属性绑定——inputV，也就是将input框的值传给input，值命名为inputV</li>
<li>input事件绑定，当input框的值inputV发生变化时，也就是当前DOM元素的value值发生变化时，事件触发，会将新的值赋值给inputV</li>
</ol>
<h5 id="vue-router"><a href="#vue-router" class="headerlink" title="vue router"></a>vue router</h5><h6 id="带参数的动态路由匹配："><a href="#带参数的动态路由匹配：" class="headerlink" title="带参数的动态路由匹配："></a>带参数的动态路由匹配：</h6><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。在vue-router中可以使用一个动态段来实现，我们称之为路径参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些都会传递给 `createRouter`</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 动态段以冒号开始</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h6 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h6><p>重定向也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/a</code> 重定向到 <code>/b</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure>

<p>重定向的目标也可以是一个命名的路由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span> &#125; &#125;]</span><br></pre></td></tr></table></figure>

<p>甚至是一个方法，动态返回重定向目标：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search/:searchText&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h5 id="vue传值"><a href="#vue传值" class="headerlink" title="vue传值"></a>vue传值</h5><p>​        常见的父传子的通信方式有props、$ref、$emit</p>
<h6 id="props"><a href="#props" class="headerlink" title="props"></a>props</h6><ol>
<li><p>静态传递</p>
<p><em>父组件</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">&quot;我是子组件一！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span>  <span class="comment">&lt;!-- 通过自定义属性传递数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><em>子组件</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>] <span class="comment">//声明一个自定义的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>逻辑：</p>
<p>首先，子组件通过props选项来声明一个自定义属性，比如声明了一个message属性，然后在父组件使用子组件时，在其标签内使用该属性message&#x3D;’xxxxx’，最后在子组件的标签内使用插值</p>
</li>
<li><p>动态传递</p>
<p>使用v-bind即可实现动态传值，通过v-bind（缩写为:)来绑定props的自定义属性，父组件可传递表达式、对象等</p>
<p><em>父组件</em>：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">&quot;我是子组件一！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">&quot;a+b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 用一个变量进行动态赋值 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">a</span>:<span class="string">&#x27;我是子组件二！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">b</span>:<span class="number">112233</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>:<span class="string">&#x27;我是子组件三！&#x27;</span>+ <span class="title class_">Math</span>.<span class="title function_">random</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><em>子组件</em>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h6 id="ref传值"><a href="#ref传值" class="headerlink" title="$ref传值"></a>$ref传值</h6><p>​    <em>父组件：</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mounted</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>);</span><br><span class="line">    <span class="comment">// console.log( this.$refs.msg);</span></span><br><span class="line">    <span class="comment">// this.$refs.msg.getMessage(&#x27;我是子组件一！&#x27;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>子组件：</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getMessage</span>(<span class="params">m</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">message</span> = m;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>首先，在父组件引用子组件标签上给定ref属性，这样就可以调用子组件上的属性和方法，然后在子组件上声明自定义属性和方法，最后在子组件上使用，使用的时候，ref要在子组件存在的条件下进行，如果与v-if和v-show连用，ref最好是和v-show一起用，因为v-show是控制元素显示与隐藏，而v-if控制DOM元素存在与否，如果v-if为false的时候，DOM元素都不存在，那么ref自然取不到值。</p>
<p>有时候会遇到打印$refs的时候，有这个子组件的属性但是具体的是undefined，是因为要等子组件挂载完成时才可以使用子组件的属性和方法，此时可以使用nextTick</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h6 id="emit传值"><a href="#emit传值" class="headerlink" title="$emit传值"></a>$emit传值</h6><p>​    （子向父组件传值）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">       <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">     	<span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">handleClick</span>(<span class="params">param</span>)&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">count</span> += param </span><br><span class="line">          &#125; </span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">       			&lt;count @add=&#x27;handleClick&#x27;/&gt;	</span></span><br><span class="line"><span class="string">       		  &lt;/div&gt;`</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">       <span class="attr">props</span>:[<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">       <span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">addOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">template</span>:</span><br><span class="line">       	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&#x27;addOne&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       		&#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">       	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p>​    首先，在父组件声明自定义属性，然后通过子组件标签使用v-bind绑定自定义属性传值，在子组件使用props传值，理论上props得到的值只能读不能修改，如果想要通过子组件来修改，需要使用$emit方法，即$emit(event,parma)&#x3D;&#x3D;&gt;(event事件，parma参数)，随后在父组件的子组件标签中用@绑定event并且在父组件的methods中重写方法即可，关于parma参数，比如想要使每次点击的数是2，那么在$emit里传递param值，在父组件的方法里用param接受参数再调用即可。</p>
<h6 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h6><p>​    </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
</search>
